import {interfaces} from 'inversify';

import { AbilityService } from './api/ability.service';
import { BerryService } from './api/berry.service';
import { BerryFirmnessService } from './api/berryFirmness.service';
import { BerryFlavorService } from './api/berryFlavor.service';
import { CharacteristicService } from './api/characteristic.service';
import { ContestEffectService } from './api/contestEffect.service';
import { ContestTypeService } from './api/contestType.service';
import { EggGroupService } from './api/eggGroup.service';
import { EncounterConditionService } from './api/encounterCondition.service';
import { EncounterConditionValueService } from './api/encounterConditionValue.service';
import { EncounterMethodService } from './api/encounterMethod.service';
import { EvolutionChainService } from './api/evolutionChain.service';
import { EvolutionTriggerService } from './api/evolutionTrigger.service';
import { GenderService } from './api/gender.service';
import { GenerationService } from './api/generation.service';
import { GrowthRateService } from './api/growthRate.service';
import { ItemService } from './api/item.service';
import { ItemAttributeService } from './api/itemAttribute.service';
import { ItemCategoryService } from './api/itemCategory.service';
import { ItemFlingEffectService } from './api/itemFlingEffect.service';
import { ItemPocketService } from './api/itemPocket.service';
import { LanguageService } from './api/language.service';
import { LocationService } from './api/location.service';
import { LocationAreaService } from './api/locationArea.service';
import { MachineService } from './api/machine.service';
import { MoveService } from './api/move.service';
import { MoveAilmentService } from './api/moveAilment.service';
import { MoveBattleStyleService } from './api/moveBattleStyle.service';
import { MoveCategoryService } from './api/moveCategory.service';
import { MoveDamageClassService } from './api/moveDamageClass.service';
import { MoveLearnMethodService } from './api/moveLearnMethod.service';
import { MoveTargetService } from './api/moveTarget.service';
import { NatureService } from './api/nature.service';
import { PalParkAreaService } from './api/palParkArea.service';
import { PokeathlonStatService } from './api/pokeathlonStat.service';
import { PokedexService } from './api/pokedex.service';
import { PokemonService } from './api/pokemon.service';
import { PokemonColorService } from './api/pokemonColor.service';
import { PokemonFormService } from './api/pokemonForm.service';
import { PokemonHabitatService } from './api/pokemonHabitat.service';
import { PokemonShapeService } from './api/pokemonShape.service';
import { PokemonSpeciesService } from './api/pokemonSpecies.service';
import { RegionService } from './api/region.service';
import { StatService } from './api/stat.service';
import { SuperContestEffectService } from './api/superContestEffect.service';
import { TypeService } from './api/type.service';
import { VersionService } from './api/version.service';
import { VersionGroupService } from './api/versionGroup.service';

export class ApiServiceBinder {
    public static with(container: interfaces.Container) {
        container.bind<AbilityService>('AbilityService').to(AbilityService).inSingletonScope();
        container.bind<BerryService>('BerryService').to(BerryService).inSingletonScope();
        container.bind<BerryFirmnessService>('BerryFirmnessService').to(BerryFirmnessService).inSingletonScope();
        container.bind<BerryFlavorService>('BerryFlavorService').to(BerryFlavorService).inSingletonScope();
        container.bind<CharacteristicService>('CharacteristicService').to(CharacteristicService).inSingletonScope();
        container.bind<ContestEffectService>('ContestEffectService').to(ContestEffectService).inSingletonScope();
        container.bind<ContestTypeService>('ContestTypeService').to(ContestTypeService).inSingletonScope();
        container.bind<EggGroupService>('EggGroupService').to(EggGroupService).inSingletonScope();
        container.bind<EncounterConditionService>('EncounterConditionService').to(EncounterConditionService).inSingletonScope();
        container.bind<EncounterConditionValueService>('EncounterConditionValueService').to(EncounterConditionValueService).inSingletonScope();
        container.bind<EncounterMethodService>('EncounterMethodService').to(EncounterMethodService).inSingletonScope();
        container.bind<EvolutionChainService>('EvolutionChainService').to(EvolutionChainService).inSingletonScope();
        container.bind<EvolutionTriggerService>('EvolutionTriggerService').to(EvolutionTriggerService).inSingletonScope();
        container.bind<GenderService>('GenderService').to(GenderService).inSingletonScope();
        container.bind<GenerationService>('GenerationService').to(GenerationService).inSingletonScope();
        container.bind<GrowthRateService>('GrowthRateService').to(GrowthRateService).inSingletonScope();
        container.bind<ItemService>('ItemService').to(ItemService).inSingletonScope();
        container.bind<ItemAttributeService>('ItemAttributeService').to(ItemAttributeService).inSingletonScope();
        container.bind<ItemCategoryService>('ItemCategoryService').to(ItemCategoryService).inSingletonScope();
        container.bind<ItemFlingEffectService>('ItemFlingEffectService').to(ItemFlingEffectService).inSingletonScope();
        container.bind<ItemPocketService>('ItemPocketService').to(ItemPocketService).inSingletonScope();
        container.bind<LanguageService>('LanguageService').to(LanguageService).inSingletonScope();
        container.bind<LocationService>('LocationService').to(LocationService).inSingletonScope();
        container.bind<LocationAreaService>('LocationAreaService').to(LocationAreaService).inSingletonScope();
        container.bind<MachineService>('MachineService').to(MachineService).inSingletonScope();
        container.bind<MoveService>('MoveService').to(MoveService).inSingletonScope();
        container.bind<MoveAilmentService>('MoveAilmentService').to(MoveAilmentService).inSingletonScope();
        container.bind<MoveBattleStyleService>('MoveBattleStyleService').to(MoveBattleStyleService).inSingletonScope();
        container.bind<MoveCategoryService>('MoveCategoryService').to(MoveCategoryService).inSingletonScope();
        container.bind<MoveDamageClassService>('MoveDamageClassService').to(MoveDamageClassService).inSingletonScope();
        container.bind<MoveLearnMethodService>('MoveLearnMethodService').to(MoveLearnMethodService).inSingletonScope();
        container.bind<MoveTargetService>('MoveTargetService').to(MoveTargetService).inSingletonScope();
        container.bind<NatureService>('NatureService').to(NatureService).inSingletonScope();
        container.bind<PalParkAreaService>('PalParkAreaService').to(PalParkAreaService).inSingletonScope();
        container.bind<PokeathlonStatService>('PokeathlonStatService').to(PokeathlonStatService).inSingletonScope();
        container.bind<PokedexService>('PokedexService').to(PokedexService).inSingletonScope();
        container.bind<PokemonService>('PokemonService').to(PokemonService).inSingletonScope();
        container.bind<PokemonColorService>('PokemonColorService').to(PokemonColorService).inSingletonScope();
        container.bind<PokemonFormService>('PokemonFormService').to(PokemonFormService).inSingletonScope();
        container.bind<PokemonHabitatService>('PokemonHabitatService').to(PokemonHabitatService).inSingletonScope();
        container.bind<PokemonShapeService>('PokemonShapeService').to(PokemonShapeService).inSingletonScope();
        container.bind<PokemonSpeciesService>('PokemonSpeciesService').to(PokemonSpeciesService).inSingletonScope();
        container.bind<RegionService>('RegionService').to(RegionService).inSingletonScope();
        container.bind<StatService>('StatService').to(StatService).inSingletonScope();
        container.bind<SuperContestEffectService>('SuperContestEffectService').to(SuperContestEffectService).inSingletonScope();
        container.bind<TypeService>('TypeService').to(TypeService).inSingletonScope();
        container.bind<VersionService>('VersionService').to(VersionService).inSingletonScope();
        container.bind<VersionGroupService>('VersionGroupService').to(VersionGroupService).inSingletonScope();
    }
}
